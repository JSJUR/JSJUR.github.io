local DefaultBallDistance = 2
local JumpBallDistance = 1
local LockOnPartName = "Head"
local AimlockKey = Enum.KeyCode.Q

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local StarterGui = game:GetService("StarterGui")
local Camera = workspace.CurrentCamera

local LocalPlayer = Players.LocalPlayer
local Aimlock = false
local Balls = {}
local CurrentBall = nil
local Deleted = false

local function getPlayerSpeed(humanoidRootPart)
	local velocity = humanoidRootPart.Velocity
	return velocity.Magnitude
end

local function CreateBall(player)
	local function onCharacterAdded(character)
		print("Character added for player:", player.Name)
		if Deleted then return end
		if player == LocalPlayer then return end

		local HumanoidRootPart = character:WaitForChild("HumanoidRootPart")
		local LockOnPart = character:WaitForChild(LockOnPartName)
		local Humanoid = character:WaitForChild("Humanoid")

		local Ball = Instance.new("Part", workspace)
		Ball.Size = Vector3.new(0.5, 0.5, 0.5)
		Ball.Shape = Enum.PartType.Ball
		Ball.Material = Enum.Material.Neon
		Ball.BrickColor = BrickColor.new("Bright blue")
		Ball.Anchored = true
		Ball.CanCollide = false
		Ball.Name = player.Name

		table.insert(Balls, Ball)
		print("Ball created for player:", player.Name)

		local Highlight = Instance.new("Highlight", Ball)
		Highlight.FillTransparency = 0
		Highlight.FillColor = Color3.fromRGB(170, 170, 255)
		Highlight.OutlineTransparency = 0

		local Jumping = false
		local RunServiceConnection

		Humanoid.StateChanged:Connect(function(_, NewState)
			if NewState == Enum.HumanoidStateType.Jumping or NewState == Enum.HumanoidStateType.Freefall then
				Jumping = true
			else
				Jumping = false
			end
		end)

		local function UpdateBallPosition()
			if not HumanoidRootPart then return end

			local Velocity = HumanoidRootPart.Velocity
			local SpeedMultiplier = Velocity.Magnitude / 16

			local NewPosition

			if Jumping then
				NewPosition = LockOnPart.Position + Velocity.Unit * DefaultBallDistance
			elseif Velocity.Magnitude > 0 then
				NewPosition = LockOnPart.Position + Velocity.Unit * SpeedMultiplier * DefaultBallDistance
			else
				NewPosition = LockOnPart.Position
			end

			if NewPosition then
				if NewPosition.Y < LockOnPart.Position.Y then
					NewPosition = Vector3.new(NewPosition.X, LockOnPart.Position.Y, NewPosition.Z)
				end

				Ball.Position = NewPosition
			end
		end

		RunServiceConnection = RunService.RenderStepped:Connect(UpdateBallPosition)

		character.AncestryChanged:Connect(function(_, parent)
			if not parent then
				if RunServiceConnection then RunServiceConnection:Disconnect() end
				for _, Ball in ipairs(Balls) do
					if Ball.Name == player.Name then
						table.remove(Balls, table.find(Balls, Ball))
						Ball:Destroy()
						print("Ball destroyed for player:", player.Name)
						break
					end
				end
			end
		end)
	end

	player.CharacterAdded:Connect(onCharacterAdded)
	if player.Character then
		onCharacterAdded(player.Character)
	end

	player.CharacterRemoving:Connect(function()
		print("Character removing for player:", player.Name)
		for _, Ball in ipairs(Balls) do
			if Ball.Name == player.Name then
				table.remove(Balls, table.find(Balls, Ball))
				Ball:Destroy()
				print("Ball removed for player:", player.Name)
				break
			end
		end
	end)
end

local function GetNearestTarget()
	local Closest
	local ShortestDistance = math.huge

	for _, Ball in ipairs(Balls) do
		Ball.Highlight.FillColor = Color3.fromRGB(170, 170, 255)
		if Ball.Name ~= Players.LocalPlayer.Name then
			local Position = Camera:WorldToViewportPoint(Ball.Position)
			local Distance = (Vector2.new(Position.X, Position.Y) - Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)).magnitude
			if Distance < ShortestDistance then
				Closest = Ball
				ShortestDistance = Distance
			end
		end
	end

	return Closest
end

for _, player in pairs(Players:GetPlayers()) do
	CreateBall(player)
end

Players.PlayerAdded:Connect(function(player)
	print("Player added:", player.Name)
	CreateBall(player)
end)

Players.PlayerRemoving:Connect(function(player)
	if Deleted then return end
	print("Player removing:", player.Name)
	for _, Ball in ipairs(Balls) do
		if Ball.Name == player.Name then
			table.remove(Balls, table.find(Balls, Ball))
			Ball:Destroy()
			print("Ball destroyed for player:", player.Name)
			break
		end
	end
end)

local function deleteAllBalls()
	while #Balls > 0 do
		for _, Ball in ipairs(Balls) do
			if Ball then
				Ball:Destroy()
			end
			table.remove(Balls, table.find(Balls, Ball))
		end
		wait(0.1)
	end
end

UserInputService.InputBegan:Connect(function(Input, Typing)
	if not Typing then
		if Input.KeyCode == AimlockKey and not Deleted then
			Aimlock = not Aimlock
			if Aimlock then
				local nearestBall = GetNearestTarget()
				if nearestBall then
					nearestBall.Highlight.FillColor = Color3.fromRGB(255, 50, 50)
					CurrentBall = nearestBall
				else
					Aimlock = false
				end
			else
				GetNearestTarget()
			end
		elseif Input.KeyCode == Enum.KeyCode.P then
			Deleted = true
			deleteAllBalls()
			RunService:UnbindFromRenderStep("UpdateBallPosition")
		end
	end
end)

RunService.RenderStepped:Connect(function()
	if Aimlock and CurrentBall then
		Camera.CFrame = CFrame.new(Camera.CFrame.Position, CurrentBall.Position)
	end
end)
